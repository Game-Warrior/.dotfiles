#+title: GW's Doom Emacs Config
#+description: My personal Doom Emacs Configuration
#+startup: showeverything
#+options: num:nil

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#beacon][BEACON]]
- [[#setting-username-and-email][SETTING USERNAME AND EMAIL]]
- [[#title-bar][TITLE BAR]]
- [[#doom-theme][DOOM THEME]]
- [[#setting-the-default-link-opener][SETTING THE DEFAULT LINK OPENER]]
- [[#menu-bar][MENU BAR]]
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
- [[#start-page][START PAGE]]
- [[#emojis][EMOJIS]]
- [[#fonts][FONTS]]
- [[#insert-date][INSERT DATE]]
- [[#line-settings][LINE SETTINGS]]
- [[#markdown][MARKDOWN]]
- [[#modeline][MODELINE]]
- [[#org-mode][ORG MODE]]
  - [[#org-fonts][Org fonts]]
  - [[#org-todos][Org todos]]
  - [[#org-export][Org-export]]
  - [[#org-journal][Org-journal]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-tree-slides][Org-tree-slides]]
  - [[#writing-functions][Writing-Functions]]
  - [[#org-ref][Org-ref]]
  - [[#todo-hl][TODO-hl]]
- [[#spell-checker][SPELL CHECKER]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#switching-windows][SWITCHING WINDOWS]]
- [[#yasnippet][YASNIPPET]]
- [[#palimpsest-mode][PALIMPSEST-MODE]]
- [[#web-mode][WEB-MODE]]
- [[#mastodon][MASTODON]]
- [[#abbrev-mode][ABBREV-MODE]]
- [[#projectile][PROJECTILE]]
- [[#go-translate][GO-TRANSLATE]]

* ABOUT THIS CONFIG
This is my Doom Emacs Config. I have built this over the last couple of months mainly from DistroTube's config.

* BEACON
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* SETTING USERNAME AND EMAIL
#+begin_src emacs-lisp
(setq user-full-name "Gardner Berry"
    user-mail-address "gardner@gamewarrior.xyz")
#+end_src

* TITLE BAR
Change the title bar format
#+begin_src emacs-lisp
    (setq frame-title-format "Hey bro, just FYI, this buffer is called %b or something like that.")
#+end_src

* DOOM THEME
Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+begin_src emacs-lisp
(setq doom-theme 'doom-solarized-dark)
(map! :leader
      :desc "Load new theme" "h t" #'load-theme)
#+end_src

* SETTING THE DEFAULT LINK OPENER
Setting in which browser EMACS will open links
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
#+end_src

* MENU BAR
Setting menu-bar-mode to be disabled.
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src


* DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                 | DESCRIPTION                                 | KEYBINDING |
|-------------------------+---------------------------------------------+------------|
| dired-view-file         | /View file in dired/                          | SPC d v    |
| dired-up-directory      | /Go up in directory tree/                     | h          |
| dired-find-file         | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line         | Move down to next line                      | j          |
| dired-previous-line     | Move up to previous line                    | k          |
| dired-mark              | Mark file at point                          | m          |
| dired-unmark            | Unmark file at point                        | u          |
| dired-do-copy           | Copy current file or marked files           | C          |
| dired-do-rename         | Rename current file or marked files         | R          |
| dired-hide-details      | Toggle detailed listings on/off             | (          |
| dired-git-info-mode     | Toggle git information on/off               | )          |
| dired-create-directory  | Create new empty directory                  | +          |
| dired-diff              | Compare file at point with another          | =          |
| dired-subtree-toggle    | Toggle viewing subtree at point             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dirvish-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "Preview")
                              ("jpg" . "Preview")
                              ("png" . "Preview")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* START PAGE
This is where I customize the DOOM emacs Dashboard. I have a custom banner set. I have also disabled some of the short cuts on the default start page. It will alsow show you a different message based on what OS you are running.
#+begin_src emacs-lisp
(assoc-delete-all "Open project" +doom-dashboard-menu-sections)
(assoc-delete-all "Recently opened files" +doom-dashboard-menu-sections)

;; (add-hook! '+doom-dashboard-functions :append
  ;; (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by Emacs!")))

(cond ((eq system-type 'darwin)
       (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by the walled garden!"))))
      ((eq system-type 'gnu/linux)
        (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by Oxen and Penguins!"))))
      ((eq system-type 'windows-nt)
       (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by Proprietary Garbage!")))))

(defun gw/doom-art ()
  (let* ((banner'("______ _____ ____ ___ ___"
                  "`  _  V  _  V  _ \\|  V  ´"
                  "| | | | | | | | | |     |"
                  "| | | | | | | | | | . . |"
                  "| |/ / \\ \\| | |/ /\\ |V| |"
                  "|   /   \\__/ \\__/  \\| | |"
                  "|  /                ' | |"
                  "| /     E M A C S     \\ |"
                  "´´                     ``"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'gw/doom-art)


#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
;; (use-package emojify
  ;; :hook (after-init . global-emojify-mode))
#+end_src

* FONTS
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "SF Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "SF Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* INSERT DATE
Some custom functions to insert the date.  The function 'insert-todays-date' can be used one of three different ways: (1) just the keybinding without the universal argument prefix, (2) with one universal argument prefix, or (3) with two universal argument prefixes.  The universal argument prefix is 'SPC-u' in Doom Emacs (C-u in standard GNU Emacs).  The function 'insert-any-date' only outputs to one format, which is the same format as 'insert-todays-date' without a prefix.

| COMMAND               | EXAMPLE OUTPUT            | KEYBINDING            |
|-----------------------+---------------------------+-----------------------|
| gw/insert-todays-date | Friday, November 19, 2021 | SPC i d t             |
| gw/insert-todays-date | 11-19-2021                | SPC u SPC i d t       |
| gw/insert-todays-date | 2021-11-19                | SPC u SPC u SPC i d t |
| gw/insert-any-date    | Friday, November 19, 2021 | SPC i d a             |

#+begin_src emacs-lisp
(defun gw/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun gw/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))

(map! :leader
      (:prefix ("i d" . "Insert date")
        :desc "Insert any date" "a" #'gw/insert-any-date
        :desc "Insert todays date" "t" #'gw/insert-todays-date))
#+end_src

* LINE SETTINGS
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me. The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                               | KEYBINDING  |
|--------------------------+-------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+END_SRC

* MARKDOWN

#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))

#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-18")
(setq doom-modeline-height 50     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
;; Count words
(setq doom-modeline-enable-word-count '(markdow-mode gfm-mode org-mode) )
(setq doom-modeline-lsp t)
#+end_src

* ORG MODE
I wrapped most of this block in (after! org). Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults. I have also enabled org-journal, org-superstar by adding (+journal +pretty) to the org section of my Doom Emacs init.el.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Documents/"
        org-agenda-files '("~/Documents/Schedule.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "✸" "✿" "◆" "○")
        org-superstar-item-bullet-alist '((?- . ?➤) (?+ . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "BLOG(b)"           ; Blog writing assignments
             "SCHOOL(s)"         ; School Tasks
             "PROJ(p)"           ; A project that contains other tasks
             "VIDEO(v)"          ; Video assignments
             "CLASS(l)"          ; Agenda assignment for class
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
#+END_SRC

** Org fonts
I have created an interactive function for each color scheme (M-x gw/org-colors-*).  These functions will set appropriate colors and font attributes for org-level fonts and the org-table font.
#+begin_src emacs-lisp
(after! org
(defun gw/org-colors-doom-one ()
  "Enable Doom One colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#51afef" ultra-bold)
         (org-level-2 1.6 "#c678dd" extra-bold)
         (org-level-3 1.5 "#98be65" bold)
         (org-level-4 1.4 "#da8548" semi-bold)
         (org-level-5 1.3 "#5699af" normal)
         (org-level-6 1.2 "#a9a1e1" normal)
         (org-level-7 1.1 "#46d9ff" normal)
         (org-level-8 1.0 "#ff6c6b" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-dracula ()
  "Enable Dracula colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#8be9fd" ultra-bold)
         (org-level-2 1.6 "#bd93f9" extra-bold)
         (org-level-3 1.5 "#50fa7b" bold)
         (org-level-4 1.4 "#ff79c6" semi-bold)
         (org-level-5 1.3 "#9aedfe" normal)
         (org-level-6 1.2 "#caa9fa" normal)
         (org-level-7 1.1 "#5af78e" normal)
         (org-level-8 1.0 "#ff92d0" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-gruvbox-dark ()
  "Enable Gruvbox Dark colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#fb4934" ultra-bold)
         (org-level-2 1.6 "#fe8019" extra-bold)
         (org-level-3 1.5 "#8ec07c" bold)
         (org-level-4 1.4 "#98971a" semi-bold)
         (org-level-5 1.3 "#83a598" normal)
         (org-level-6 1.2 "#458588" normal)
         (org-level-7 1.1 "#d3869b" normal)
         (org-level-8 1.0 "#b16286" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-monokai-pro ()
  "Enable Monokai Pro colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#78dce8" ultra-bold)
         (org-level-2 1.6 "#ab9df2" extra-bold)
         (org-level-3 1.5 "#a9dc76" bold)
         (org-level-4 1.4 "#fc9867" semi-bold)
         (org-level-5 1.3 "#ff6188" normal)
         (org-level-6 1.2 "#ffd866" normal)
         (org-level-7 1.1 "#78dce8" normal)
         (org-level-8 1.0 "#ab9df2" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-nord ()
  "Enable Nord colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#81a1c1" ultra-bold)
         (org-level-2 1.6 "#b48ead" extra-bold)
         (org-level-3 1.5 "#a3be8c" bold)
         (org-level-4 1.4 "#ebcb8b" semi-bold)
         (org-level-5 1.3 "#bf616a" normal)
         (org-level-6 1.2 "#88c0d0" normal)
         (org-level-7 1.1 "#81a1c1" normal)
         (org-level-8 1.0 "#b48ead" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-oceanic-next ()
  "Enable Oceanic Next colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#EC5f67" ultra-bold)
         (org-level-2 1.6 "#F99157" extra-bold)
         (org-level-3 1.5 "#fac863" bold)
         (org-level-4 1.4 "#99C794" semi-bold)
         (org-level-5 1.3 "#5fb3b3" normal)
         (org-level-6 1.2 "#ec5f67" normal)
         (org-level-7 1.1 "#6699cc" normal)
         (org-level-8 1.0 "#c594c5" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-palenight ()
  "Enable Palenight colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#82aaff" ultra-bold)
         (org-level-2 1.6 "#c792ea" extra-bold)
         (org-level-3 1.5 "#c3e88d" bold)
         (org-level-4 1.4 "#ffcb6b" semi-bold)
         (org-level-5 1.3 "#a3f7ff" normal)
         (org-level-6 1.2 "#e1acff" normal)
         (org-level-7 1.1 "#f07178" normal)
         (org-level-8 1.0 "#ddffa7" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-solarized-dark ()
  "Enable Solarized Dark colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#dc322f" ultra-bold)
         (org-level-2 1.6 "#cb4b16" extra-bold)
         (org-level-3 1.5 "#b58900" bold)
         (org-level-4 1.4 "#859900" semi-bold)
         (org-level-5 1.3 "#35a69c" normal)
         (org-level-6 1.2 "#268bd2;" normal)
         (org-level-7 1.1 "#3F88AD" normal)
         (org-level-8 1.0 "#6c71c4" normal)))

    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-solarized-light ()
  "Enable Solarized Light colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#dc322f" ultra-bold)
         (org-level-2 1.6 "#b58900" extra-bold)
         (org-level-3 1.5 "#cb4b16" bold)
         (org-level-4 1.4 "#2aa198" semi-bold)
         (org-level-5 1.3 "#268bd2" normal)
         (org-level-6 1.2 "#6c71c4" normal)
         (org-level-7 1.1 "#657b83" normal)
         (org-level-8 1.0 "#859900" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-tomorrow-night ()
  "Enable Tomorrow Night colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#81a2be" ultra-bold)
         (org-level-2 1.6 "#b294bb" extra-bold)
         (org-level-3 1.5 "#b5bd68" bold)
         (org-level-4 1.4 "#e6c547" semi-bold)
         (org-level-5 1.3 "#cc6666" normal)
         (org-level-6 1.2 "#70c0ba" normal)
         (org-level-7 1.1 "#b77ee0" normal)
         (org-level-8 1.0 "#9ec400" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-henna ()
  "Enable Henna colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#e74c3c" ultra-bold)
         (org-level-2 1.6 "#56b5c2" extra-bold)
         (org-level-3 1.5 "#53df83" bold)
         (org-level-4 1.4 "#1abc9c" semi-bold)
         (org-level-5 1.3 "#ECBE7B" normal)
         (org-level-6 1.2 "#C5A3FF" normal)
         (org-level-7 1.1 "#FFB8D1" normal)
         (org-level-8 1.0 "" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#f8f8f0"))

(defun gw/org-colors-doom-one-alt ()
  "Enable an alternitive set of Doom One colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#ff6c6b" ultra-bold)
         (org-level-2 1.6 "#da8548" extra-bold)
         (org-level-3 1.5 "#46d9ff" bold)
         (org-level-4 1.4 "#98be65" semi-bold)
         (org-level-5 1.3 "#51afef" normal)
         (org-level-6 1.2 "#2257A0" normal)
         (org-level-7 1.1 "#c678dd" normal)
         (org-level-8 1.0 "#a9a1e1" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

(defun gw/org-colors-doom-old-hope ()
  "Enable Doom Old Hope colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#4fb3d8" ultra-bold)
         (org-level-2 1.6 "#ee7b29" extra-bold)
         (org-level-3 1.5 "#78bd65" bold)
         (org-level-4 1.4 "#b978ab" semi-bold)
         (org-level-5 1.3 "#4fb3d8" normal)
         (org-level-6 1.2 "#ee7b29" normal)
         (org-level-7 1.1 "#78bd65" normal)
         (org-level-8 1.0 "#b978ab" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#cbccd1"))

(defun gw/org-colors-peacock ()
  "Enable Doom Peacock colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#ff5d38" ultra-bold)
         (org-level-2 1.6 "#cb4b16" extra-bold)
         (org-level-3 1.5 "#bcd42a" bold)
         (org-level-4 1.4 "#98be65" semi-bold)
         (org-level-5 1.3 "#4fb3d8" normal)
         (org-level-6 1.2 "#2257A0" normal)
         (org-level-7 1.1 "#c678dd" normal)
         (org-level-8 1.0 "#a9a1e1" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#cbccd1"))

(defun gw/org-colors-1337 ()
  "Enable Doom 1337 colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#FF5E5E" ultra-bold)
         (org-level-2 1.6 "#FC9354" extra-bold)
         (org-level-3 1.5 "#E9FDAC" bold)
         (org-level-4 1.4 "#B5CEA8" semi-bold)
         (org-level-5 1.3 "#468800" normal)
         (org-level-6 1.2 "#35CDAF" normal)
         (org-level-7 1.1 "#8CDAFF" normal)
         (org-level-8 1.0 "#C586C0" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#cbccd1"))

(defun gw/org-colors-oksolar-dark ()
  "Enable OKSolar Dark Colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#F23749" ultra-bold)
         (org-level-2 1.6 "#819500" extra-bold)
         (org-level-3 1.5 "#D56500" bold)
         (org-level-4 1.4 "#AC8300" semi-bold)
         (org-level-5 1.3 "#35A69C" normal)
         (org-level-6 1.2 "#2B90D8" normal)
         (org-level-7 1.1 "#3F88AD" normal)
         (org-level-8 1.0 "#DD459D" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#cbccd1"))

(defun gw/org-colors-spacegrey ()
  "Enable OKSolar Dark Colors for Org headers."
  (interactive)
  (dolist
      (face
       '((org-level-1 1.7 "#BF616A" ultra-bold)
         (org-level-2 1.6 "#D08770" extra-bold)
         (org-level-3 1.5 "#ECBE7B" bold)
         (org-level-4 1.4 "#A3BE8C" semi-bold)
         (org-level-5 1.3 "#4db5bd" normal)
         (org-level-6 1.2 "#2B90D8" normal)
         (org-level-7 1.1 "#2257A0" normal)
         (org-level-8 1.0 "#c678dd" normal)))
    (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
    (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#cbccd1"))

;; Load our desired gw/org-colors-* theme on startup
    (gw/org-colors-solarized-dark))
;; )
#+end_src

** Org todos
This is a way for me to archive my TODOs from my Schedule.org.
#+begin_src emacs-lisp
;; (defun agenda-mark-done-and-archive ()
   ;; (interactive)
   ;; (org-agenda-todo 'done)
   ;; (org-agenda-archive))
 ;; (define-key org-agenda-mode-map "\C-c\C-x\C-s" 'agenda-mark-done-and-archive)
#+end_src

** Org-export
We need ox-man for "Org eXporting" to manpage format and ox-gemini for exporting to gemtext (for the gemini protocol).
=NOTE=: I also enable ox-publish for converting an Org site into an HTML site, but that is done in init.el (org +publish).

#+BEGIN_SRC emacs-lisp
(use-package! ox-twbs)
;; (use-package! ox-re-reveal)
(use-package! ox-pandoc)
(use-package! ox-gfm)
(use-package! ox-reveal)
#+END_SRC

*** Org-Reveal
Org-Reveal is a package that allows you to export your org documents to Reveal.js to make pretty presentations. I also have a macro to allow me no hide content.
#+begin_src emacs-lisp
;; Reveal.js + Org mode
(require 'ox-reveal)
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
(setq org-reveal-plugins 1)
(setq org-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h5>@Gamewarrior010@social.linux.pizza</h5>")
(setq org-reveal-theme "Moon")

     (defun set-ignored-headlines-tags (backend)
     "Remove all headlines with tag ignore_heading in the current buffer.
        BACKEND is the export back-end being used, as a symbol."
     (cond ((org-export-derived-backend-p backend 'md) (setq  org-export-exclude-tags '("noexport" "mdignore")))
           ((org-export-derived-backend-p backend 'reveal) (setq  org-export-exclude-tags '("noexport" "revealignore")))
           (t (setq  org-export-exclude-tags '("noexport")))
       )
    )
#+end_src

** Org-journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/Documents/Personal/Journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src


** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Org-Roam
Org-Roam is a plain-text personal knowledge management system.
#+begin_src emacs-lisp
(use-package org-roam
:ensure t
:init
(setq org-roam-v2-ack t)
:custom
(org-roam-directory "~/Notes")
(org-roam-completion-everywhere t)
:bind (("C-c n l" . org-roam-buffer-toggle)
       ("C-c n f" . org-roam-node-find)
       ("C-c n i" . org-roam-node-insert)
       :map org-mode-map
       ("C-M-i" . completion-at-point))
:config
(org-roam-setup))
#+end_src

** Org-tree-slides
Customization for Org-tree-slides.
#+begin_src emacs-lisp

(use-package hide-mode-line)

(defun gw/presentation-setup ()
  ;; Hide the mode line
  (hide-mode-line-mode 1)

  ;; Display images inline
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images

  ;; Scale the text.  The next line is for basic scaling:
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))

(defun gw/presentation-end ()
  ;; Show the mode line again
  (hide-mode-line-mode 0)

  ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
  ;; (text-scale-mode 0))

  ;; If you use face-remapping-alist, this clears the scaling:
  (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . gw/presentation-setup)
         (org-tree-slide-stop . gw/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil))
#+end_src

** Writing-Functions
#+begin_src emacs-lisp
(defun gw/writing-mode ()
  "Acctivate my writing environment"
  (interactive)
  (writeroom-mode 1)
  (abbrev-mode 1)
  (message "Get writing!"))

(defun gw/normal-writing ()
  "Deacctivate my writing environment"
  (interactive)
  (writeroom-mode 0)
  (message "You're done! Go touch some grass!"))
#+end_src

** Org-ref
Org-ref makes it easy to insert citations, cross-references, indexes and glossaries as hyper-functional links into org files. The links are fontified so you can tell them apart from other links, and each link is clickable to access functions like opening a pdf, notes or url associated with the link. Each link also can be exported to LaTeX to build a PDF. For citations, export to other formats is supported by citeproc for high quality export to HTML, markdown, plain text, or stand-alone (i.e. independent of a bibtex file) LaTeX. For a full explanation of the features in org-ref see ./org-ref.org.
#+begin_src emacs-lisp

(use-package ivy-bibtex
  :init
  (setq bibtex-completion-bibliography '("~/Documents/emacs-stuff/bibliography/references.bib"
					 "~/Documents/emacs-stuff/bibliography/dei.bib"
					 "~/Documents/emacs-stuff/bibliography/main.bib"
					 "~/Documents/emacs-stuff/bibliography/archive.bib")
	bibtex-completion-library-path '("~/Documents/emacs-stuff/bibliography/bibtex-pdfs/")
	bibtex-completion-notes-path "~/Documents/emacs-stuff/bibliography/notes/"
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath))))

(use-package org-ref
  :ensure nil
  :init
  (require 'bibtex)
  (setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5)
  (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  (define-key org-mode-map (kbd "s-[") 'org-ref-insert-link-hydra/body)
  (require 'org-ref-ivy)
  (require 'org-ref-arxiv)
  (require 'org-ref-scopus)
  (require 'org-ref-wos))


(use-package org-ref-ivy
  :ensure nil
  :init (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	      org-ref-insert-label-function 'org-ref-insert-label-link
	      org-ref-insert-ref-function 'org-ref-insert-ref-link
	      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body))))

#+end_src

*** Bibtex
#+begin_src emacs-lisp
(require 'bibtex)

(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)

(define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
#+end_src

** TODO-hl
Highlight TODO and similar keywords in comments and strings. Here I have set a TODO to be turquoise, FIXME to be red and, DONE to be green.
#+begin_src emacs-lisp
(setq global-hl-todo-mode 1)

(defun gw/todo-hl-oksolar-dark ()
  "Set TODO Colors to the OKSOLAR colors"
  (interactive)
 (setq hl-todo-keyword-faces
       '(("TODO"   . "#35A69C")
         ("FIXME"  . "#F23749")
         ("WAIT"   . "#7D80D1"))))
(defun gw/todo-hl-henna ()
  (interactive)
  (setq hl-todo-keyword-faces
        '(("TODO"  . "#1abc9c")
          ("FIXME" . "#e74c3c")
          ("WAIT"  . "#C5A3FF"))))

(gw/todo-hl-oksolar-dark)
#+end_src


* SPELL CHECKER
This is where I set GNU Aspell as my default spell checker.
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
#+end_src


* RAINBOW MODE
Rainbow mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

* SWITCHING WINDOWS
Here is where I set my keybindings for switching between windows.
#+begin_src emacs-lisp
(global-set-key (kbd "M-b") 'ace-window)
#+end_src

* YASNIPPET
YASnippet is a tool that allows you to create templates do allow you to write less boilerplate when starting documents.
#+begin_src emacs-lisp
(setq yas-snippet-dirs '("~/Documents/emacs-stuff/snippets"))
(yas-global-mode 1)
#+end_src

* PALIMPSEST-MODE
This minor mode for Emacs provides several strategies to remove text without permanently deleting it. Namely, it provides the following capabilities:
| Keybindings | Action                                         |
|-------------+------------------------------------------------|
| C-c C-r     | Send selected text to the bottom of the buffer |
| C-c C-s     | Send selected text to the top of the buffer    |
| C-c C-q     | Send selected text to a trash file             |

Much like code, the process of writing text is a progression of revisions where content gets transformed and refined. During these iterations, it is often desirable to move text instead of deleting it: you may have written a sentence that doesn't belong in the paragraph you're editing right now, but it might fit somewhere else. Since you don't know where exactly, you'd like to put it out of the way, not discard it entirely. Palimpsest saves you from the traveling back and forth between your current position and the bottom of your document (or another draft or trash document).

Next time you're writing fiction, non-fiction, a journalistic piece or a blog post using Emacs, give palimpsest-mode a try. You might even try it while coding in a functional language, moving stuff around sprightly, aided by an abstraction reminiscent of the Read-Eval-Print loop, yet completely orthogonal.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'palimpsest-mode)
#+end_src

* WEB-MODE
These are my hooks for web-mode.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html\\'" .web-mode))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+end_src

* MASTODON
mastodon.el is an Emacs client for the AcitivityPub social networks that implement the Mastodon API.
#+begin_src emacs-lisp
;; (require 'mastodon-alt)
;; (mastodon-alt-tl-activate)
    (setq mastodon-instance-url "https://social.linux.pizza"
          mastodon-active-user "Gamewarrior010")
#+end_src

* ABBREV-MODE
Auto expansion for Abbrev-mode.
#+begin_src emacs-lisp
;; Enable abbreviation mode
(add-hook 'text-mode-hook 'abbrev-mode)
#+end_src

* PROJECTILE
Manage Projects
#+begin_src emacs-lisp
;; (projectile-project-search-path '("~/Documents/School"))
#+end_src

* GO-TRANSLATE
This is a translation framework for emacs, and is flexible and powerful.
#+begin_src emacs-lisp
(require 'go-translate)

(setq gts-translate-list '(("en" "zh")))

;; (setq gts-default-translator (gts-translator :engines (gts-bing-engine)))

(setq gts-default-translator
      (gts-translator
       :picker (gts-prompt-picker)
       :engines (list (gts-bing-engine) (gts-google-engine))
       :render (gts-buffer-render)))
#+end_src

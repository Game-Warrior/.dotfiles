#+title: My Awesome WM config
#+description: My configuraton for the Awesome window manager
#+property: header-args :tangle rc.lua
#+author: Gardner Berry
#+options: num:nil

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#luarocks][Luarocks]]
- [[#awesome-libraries][Awesome libraries]]
  - [[#standard-libraries][Standard Libraries]]
  - [[#widget-and-layout-library][Widget and Layout Library]]
  - [[#theme-handling-library][Theme Handling Library]]
  - [[#notification-library][Notification Library]]
  - [[#hot-keys-library][Hot Keys Library]]
- [[#error-handling][Error Handling]]
  - [[#errors-after-startup][Errors After Startup]]
- [[#themes][Themes]]
- [[#local-settings][Local Settings]]
- [[#layouts][Layouts]]
- [[#awesome-menu][Awesome Menu]]
- [[#setting-the-wallpaper][Setting the Wallpaper]]
- [[#layouts-1][Layouts]]
- [[#prompt-box][Prompt Box]]
- [[#mouse-bindings][Mouse Bindings]]
- [[#keybindings][Keybindings]]
  - [[#layout-manipulation][Layout Manipulation]]
  - [[#standard-programs][Standard Programs]]
  - [[#application-shortcuts][Application Shortcuts]]
  - [[#execute-lua-code][Execute Lua Code]]
  - [[#menubar][Menubar]]
  - [[#window-controls][Window Controls]]
  - [[#moving-between-the-tags][Moving Between The Tags]]
- [[#all-rules][All Rules]]
- [[#floating-windows][Floating Windows]]
  - [[#title-bars][Title Bars]]
  - [[#firefox-rules][Firefox Rules]]
  - [[#discord][Discord]]
- [[#signals][Signals]]
- [[#autostart-applications][Autostart Applications]]
- [[#window-gaps][Window Gaps]]

* About This Config
This is my AwesomeWM configuration file. It is mostly the default auto generated configuration file with some notable changes. Namely the auto start applications and the application launcher keybindings.
#+begin_src lua
--   _____  __          __
--  / ____| \ \        / /
-- | |  __   \ \  /\  / / GameWarrior
-- | | |_ |   \ \/  \/ /  https://github.com/game-warrior
-- | |__| |    \  /\  /   @gamewarrior010@social.linux.pizza
--  \_____|     \/  \/
--
--  Basic Awesome Config
#+end_src


* Luarocks
If LuaRocks is installed, make sure that packages installed through it are found (e.g. lgi). If LuaRocks is not installed, do nothing.
#+begin_src lua
pcall(require, "luarocks.loader")
#+end_src

* Awesome libraries
** Standard Libraries
#+begin_src lua
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
#+end_src
** Widget and Layout Library
#+begin_src lua
local wibox = require("wibox")
#+end_src
** Theme Handling Library
#+begin_src lua
local beautiful = require("beautiful")
#+end_src
** Notification Library
#+begin_src lua
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup")
#+end_src
** Hot Keys Library
Enable hotkeys help widget for VIM and other apps when client with a matching name is opened:
#+begin_src lua
require("awful.hotkeys_popup.keys")
#+end_src

* Error Handling
Check if awesome encountered an error during startup and fell back to another config (This code will only ever execute for the fallback config)
#+begin_src lua
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end
#+end_src

** Errors After Startup
#+begin_src lua
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}
#+end_src

* Themes
#+begin_src lua
-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init(gears.filesystem.get_themes_dir() .. "default/theme.lua")
#+end_src

* Local Settings
Here is where the local defaults are set.
#+begin_src lua
local modkey      = "Mod4"
local altkey      = "Mod1"
local ctrlkey     = "Control"
local terminal    = "alacritty"
local browser     = "firefox"
local editor      = os.getenv("EDITOR") or "vim"
local emacs       = "emacsclient -c -a 'emacs' "
local mediaplayer = "mpv"
local soundplayer = "ffplay -nodisp -autoexit " -- The program that will play system sounds
#+end_src

* Layouts
Table of layouts to cover with awful.layout.inc, order matters.
#+begin_src lua
awful.layout.layouts = {
--    awful.layout.suit.floating,
    awful.layout.suit.tile,
--    awful.layout.suit.tile.left,
--    awful.layout.suit.tile.bottom,
--    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.floating,
--    awful.layout.suit.spiral.dwindle,
--    awful.layout.suit.max,
--    awful.layout.suit.max.fullscreen,
--    awful.layout.suit.magnifier,
--    awful.layout.suit.corner.nw,
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.se,
}
-- }}}
#+end_src

* Awesome Menu
Create a launcher widget and a main menu
#+begin_src lua
-- {{{ Menu
myawesomemenu = {
   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", function() awesome.quit() end },
}

--mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
--                                    { "open terminal", terminal }
--                                  }
--                        })

--mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
--                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()

--{{{ Wibar
-- Create a textclock widget
local mytextclock = wibox.widget.textclock('%a %b %d, %I:%M')

-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = gears.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  c:emit_signal(
                                                      "request::activate",
                                                      "tasklist",
                                                      {raise = true}
                                                  )
                                              end
                                          end),
                     awful.button({ }, 3, function()
                                              awful.menu.client_list({ theme = { width = 250 } })
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))
#+end_src

* Setting the Wallpaper
#+begin_src lua
local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
            wallpaper = wallpaper(s)
        end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(function(s)
    -- Wallpaper
    set_wallpaper(s)
#+end_src

* Layouts
These are the controls for different spacers.
#+begin_src lua
    -- Each screen has its own tag table.
--      awful.tag({ "1", "2", "3", "4", "5", "6", "7", "8", "9" }, s, awful.layout.layouts[1])
--      awful.tag({ "1", "2", "3", "4", "5", "6" }, s, awful.layout.layouts[1])
      awful.tag({ "SYS", "WWW", "DEV", "VIRT", "GAMES", "CHAT", "SCH", "MEET" }, s, awful.layout.layouts[1])
--      awful.tag({ "SYS", "WWW", "VIDEOS", "DEV", "VIRT", "GAMES", "CHAT", "SCH", "MEET" }, s, awful.layout.layouts[1])
#+end_src

* Prompt Box
Create a promptbox for each screen
#+begin_src lua
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contain an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(gears.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))
    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist {
        screen  = s,
        filter  = awful.widget.taglist.filter.all,
        buttons = taglist_buttons
    }

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist {
        screen  = s,
        filter  = awful.widget.tasklist.filter.currenttags,
        buttons = tasklist_buttons
    }

    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            mylauncher,
            s.mytaglist,
            s.mypromptbox,
        },
        s.mytasklist, -- Middle widget
        { -- Right widgets`
            --require("battery-widget") {},
            layout = wibox.layout.fixed.horizontal,
            --mykeyboardlayout,
            wibox.widget.systray(),
            mytextclock,
            s.mylayoutbox,
        },
    }
end)
-- }}}
#+end_src

* Mouse Bindings
#+begin_src lua
-- {{{ Mouse bindings
root.buttons(gears.table.join(
--    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
#+end_src

* Keybindings
#+begin_src lua
-- {{{ Key bindings
globalkeys = gears.table.join(
    awful.key({ modkey,           }, "s",      hotkeys_popup.show_help,
              {description="show help", group="awesome"}),
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev,
              {description = "view previous", group = "tag"}),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext,
              {description = "view next", group = "tag"}),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore,
              {description = "go back", group = "tag"}),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
        end,
        {description = "focus next by index", group = "client"}
    ),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
        end,
        {description = "focus previous by index", group = "client"}
    ),
--    awful.key({ modkey,           }, "w", function () mymainmenu:show() end,
--              {description = "show main menu", group = "awesome"}),
#+end_src

** Layout Manipulation
#+begin_src lua

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end,
              {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end,
              {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end,
        {description = "go back", group = "client"}),
#+end_src

** Standard Programs
#+begin_src lua
    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)          end,
              {description = "increase master width factor", group = "layout"}),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)          end,
              {description = "decrease master width factor", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1, nil, true) end,
              {description = "increase the number of master clients", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1, nil, true) end,
              {description = "decrease the number of master clients", group = "layout"}),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1, nil, true)    end,
              {description = "increase the number of columns", group = "layout"}),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1, nil, true)    end,
              {description = "decrease the number of columns", group = "layout"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1)                end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1)                end,
              {description = "select previous", group = "layout"}),

    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"}),
#+end_src

** Application Shortcuts
This is the shortcut for launching several important applications.
#+begin_src lua
 -- Applications
 -- Dmenu
    awful.key({ modkey },            "p",     function () awful.util.spawn("dmenu_run") end,
              {description = "Dmenu", group = "launcher"}),
 -- Brave
    awful.key({ modkey },            "b",     function () awful.util.spawn("brave") end,
              {description = "launch Brave", group = "applications"}),

 -- Emacs
    awful.key({ modkey },            "e",     function () awful.util.spawn("emacsclient -c") end,
              {description = "launch Emacs", group = "applications"}),

-- Nemo
    awful.key({ modkey },            "a",     function () awful.util.spawn("nemo") end,
              {description = "launch Nemo", group = "applications"}),

-- Discord
--    awful.key({ modkey },            "d",     function () awful.util.spawn("discord") end,
--              {description = "launch discord", group = "applications"}),

-- Librewolf
--    awful.key({ modkey },            "b",     function () awful.util.spawn("librewolf") end,
--              {description = "launch librewolf", group = "applications"}),

-- Chromium
   awful.key({ modkey },            "c",     function () awful.util.spawn("chromium") end,
             {description = "launch Chromium", group = "applications"}),

-- Virt-Manager
    awful.key({ modkey },            "v",     function () awful.util.spawn("virt-manager")end,
              {description = "launch Virt-Manager", group = "applications"}),

-- Firefox
awful.key({ modkey },            "z",     function () awful.util.spawn("firefox")end,
              {description = "launch Firefox", group = "applications"}),
-- Webcord
    awful.key({ modkey },            "d",     function () awful.util.spawn("webcord") end,
              {description = "launch Webcord", group = "applications"}),
#+end_src

** Execute Lua Code
#+begin_src lua
    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run {
                    prompt       = "Run Lua code: ",
                    textbox      = awful.screen.focused().mypromptbox.widget,
                    exe_callback = awful.util.eval,
                    history_path = awful.util.get_cache_dir() .. "/history_eval"
                  }
              end,
              {description = "lua execute prompt", group = "awesome"}),
#+end_src

** Menubar
#+begin_src lua
    -- Menubar
    awful.key({ modkey }, "r", function() menubar.show() end,
              {description = "show the menubar", group = "launcher"})
)
#+end_src

** Window Controls
#+begin_src lua
clientkeys = gears.table.join(
    awful.key({ modkey,           }, "f",
        function (c)
            c.fullscreen = not c.fullscreen
            c:raise()
        end,
        {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey,    }, "q",      function (c) c:kill()                         end,
              {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end,
              {description = "move to master", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen()               end,
              {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end ,
        {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
        function (c)
            c.maximized_vertical = not c.maximized_vertical
            c:raise()
        end ,
        {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c:raise()
        end ,
        {description = "(un)maximize horizontally", group = "client"})
)
#+end_src

** Moving Between The Tags
Bind all key numbers to tags.
Be careful: we use keycodes to make it work on any keyboard layout.
This should map on the top row of your keyboard, usually 1 to 9.
#+begin_src lua
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"}),
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
    )
end

clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
)
#+end_src

#+begin_src lua
-- Set keys
root.keys(globalkeys)
-- }}}
#+end_src

* All Rules
#+begin_src lua
-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },
#+end_src

* Floating Windows
#+begin_src lua
    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
        },
        class = {
          "Arandr",
          "Blueman-manager",
          "Gpick",
          "Kruler",
          "MessageWin",  -- kalarm.
          "Sxiv",
          "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
          "Wpa_gui",
          "veromix",
          "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},
#+end_src

** Title Bars
#+begin_src lua
    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = true }
    },
#+end_src
** Firefox Rules
#+begin_src lua
    -- Set Firefox to always map on the tag named "2" on screen 1.
     { rule = { class = "Firefox" },
       properties = { screen = 1, tag = "WWW" } },
#+end_src

** Discord
#+begin_src lua
     -- Set Discord to always map on the tag named "CHAT" on screen 1.
      { rule = { class = "Discord" },
      properties = { screen = 1, tag = "5" } },
}
-- }}}
#+end_src

* Signals
#+begin_src lua
-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- if not awesome.startup then awful.client.setslave(c) end

    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count changes.
        awful.placement.no_offscreen(c)
    end
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
#+end_src

* Autostart Applications
#+begin_src lua
--Autostart Applications
awful.spawn("compton")
awful.spawn("nitrogen --restore")
awful.spawn("nm-applet")
awful.spawn("/usr/bin/emacs --daemon")
awful.spawn("volumeicon")
--awful.spawn("polybar")
--awful.spawn("rustdesk")
#+end_src

* Window Gaps
#+begin_src lua
--Window Gaps
beautiful.useless_gap = 10
#+end_src

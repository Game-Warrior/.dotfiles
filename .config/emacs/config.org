#+title: My Vanilla Emacs Config
#+description: The config borrows heavily from my Doom Emacs config and DistroTube's New vanilla Emacs config.
#+author: Gardner Berry
#+options: num:nil timestamp:nil
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
  - [[#why-emacs][Why Emacs]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#gui-changes][GUI CHANGES]]
  - [[#theme][Theme]]
  - [[#title-bar][Title Bar]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
  - [[#doom-modeline][Doom-Modeline]]
  - [[#personal-modeline][Personal Modeline]]
  - [[#menu-bar-mode][Menu-bar-mode]]
  - [[#tool-bar-mode][Tool-bar-mode]]
  - [[#dashboard][Dashboard]]
  - [[#word-wrap][Word Wrap]]
- [[#personal-settings][PERSONAL SETTINGS]]
  - [[#general-keybindings][General Keybindings]]
  - [[#setting-username-and-e-mail][Setting Username and E-Mail]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#setting-the-default-link-opener][Setting the Default Link Opener]]
  - [[#elfeed][Elfeed]]
  - [[#use-package][Use-package]]
  - [[#osx-reveal-in-finder][OSX Reveal in Finder]]
  - [[#yeetube][Yeetube]]
  - [[#bookmarks][Bookmarks]]
  - [[#eperiodic][Eperiodic]]
  - [[#evil][EVIL]]
- [[#org-mode][ORG-MODE]]
  - [[#org-settings][Org-Settings]]
  - [[#org-fonts][Org-fonts]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-capture][Org-capture]]
  - [[#org-export][Org-export]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#org-novelist][Org-Novelist]]
  - [[#toc-org][Toc-Org]]
  - [[#org-superstar][Org-Superstar]]
  - [[#org-cliplink][Org-Cliplink]]
  - [[#org-contrib][Org-contrib]]
  - [[#org-insert-item][org-insert-item]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#writing-stuff][WRITING STUFF]]
  - [[#typing-practice][Typing Practice]]
  - [[#novel][Nov.el]]
  - [[#olivetti][Olivetti]]
  - [[#palimpsest-mode][Palimpsest-Mode]]
  - [[#abbrev-mode][Abbrev-Mode]]
  - [[#yasnippet][YAsnippet]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
  - [[#spell-checker][Spell Checker]]
  - [[#thesarus][Thesarus]]
- [[#reading-stuff][Reading Stuff]]
  - [[#nov][Nov]]
- [[#eshell][ESHELL]]
  - [[#aliases][Aliases]]
  - [[#prompt][Prompt]]
- [[#ai-assiants][AI ASSIANTS]]
  - [[#ellama][Ellama]]
  - [[#chatgpt-shell][Chatgpt-Shell]]
- [[#social-media][SOCIAL MEDIA]]
  - [[#mastodon][Mastodon]]
  - [[#lemmy][Lemmy]]
- [[#dired][DIRED]]
- [[#coding][CODING]]
  - [[#nix-mode][Nix-Mode]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#company][COMPANY]]

* ABOUT THIS CONFIG
This is my Doom Emacs Config. I have built this over the last couple of months mainly from DistroTube's config.
#+begin_src emacs-lisp
;;    _____ __          __
;;  / ____| \ \        / / GameWarrior
;; | |  __   \ \  /\  / /  https://github.com/game-warrior
;; | | |_ |   \ \/  \/ /   @gamewarrior010@social.linux.pizza
;; | |__| |    \  /\  /    https://www.gnu.org/software/emacs/
;;  \_____|     \/  \/     https://:github.com/doomemacs/doomemacs
#+end_src

** Why Emacs
I highly recommend that you checkout this [[https://tecosaur.github.io/emacs-config/config.html][this blog post/config by Tecosaur]] it covers way more about Doom Emacs that I want to here but to quote an excerpt from it.
#+begin_quote
Emacs is not a text editor, this is a common misnomer. It is far more apt to describe Emacs as a Lisp machine providing a generic user-centric text manipulation environment. That’s quite a mouthful. In simpler terms one can think of Emacs as a platform for text-related applications. It’s a vague and generic definition because Emacs itself is generic.

Good with text. How far does that go? A lot further than one initially thinks:

Task planning
File management
Terminal emulation
Email client
Remote server tool
Git frontend
Web client/server
and more…
Ideally, one may use Emacs as the interface to perform input → transform → output cycles, i.e. form a bridge between the human mind and information manipulation.
#+end_quote

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this =config.org= a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in "~/.config/emacs/scripts" and do not contain any code that most people are likely to need to edit.

** Adding the scripts directory to path
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'elpaca-setup)  ;; The Elpaca Package Manager
(require 'buffer-move)   ;; Buffer-move for better window management
#+end_src


* GUI CHANGES
** Theme
The first line below designates the directory where will place all of our custom-made themes, which I have created only one (dtmacs).  You can create your own Emacs themes with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].  I am also installing =doom-themes= because it contains a huge collection of themes.  M-x load-theme will list all of the themes available.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Sets the default theme to load!!!
  (load-theme 'doom-one t)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Title Bar
Change the title bar format
#+begin_src emacs-lisp
(setq frame-title-format "Hey bro, just FYI, this buffer is called %b or something like that.")
#+end_src

** Setting the Font Face
#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Doom-Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

# #+begin_src emacs-lisp
    (set-face-attribute 'mode-line nil :font "Ubuntu Mono-18")
  (use-package doom-modeline
    :config
    (setq doom-modeline-height 25     ;; sets modeline height
	  doom-modeline-bar-width 5   ;; sets right bar width
	  doom-modeline-major-mode-icon t  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.      doom-modeline-persp-name t  ;; adds perspective name to modeline
	  doom-modeline-enable-word-count '(markdown-mode gfm-mode org-mode fountain-mode) ;; Show word count
	  ))
    ;; (setq doom-modeline-time-icon t)
    (setq doom-modeline-buffer-file-name-style 'autotruncate-except-project)

# #+end_src
** Personal Modeline
#+begin_src emacs-lisp
(defun ntf/mode-line-format (left right)
  "Return a string of `window-width' length.
Containing LEFT, and RIGHT aligned respectively."
  (let ((available-width (- (window-width) (length left) 1)))
    (format (format "%%s %%%ds " available-width) left right)))

(defface evil-mode-line-face '((t (:foreground  "black"
                                                  :background "orange")))
    "Face for evil mode-line colors.")

(setq-default
   mode-line-format
   '((:eval (ntf/mode-line-format
             ;; left portion
             (format-mode-line
              (quote ("%e"
                      (:eval
                       (when (bound-and-true-p evil-local-mode)
                         (propertize
                          (concat
                           " "
                           (upcase
                            (substring (symbol-name evil-state) 0 1))
                           (substring (symbol-name evil-state) 1)
                           " ") 'face 'evil-mode-line-face)))
                      " " (:eval (when (buffer-modified-p) "[+]"))
                      " " mode-line-buffer-identification
                      " %l:%c")))
             ;; right portion
             (format-mode-line (quote ("%m " (vc-mode vc-mode))))))))
#+end_src
** Menu-bar-mode
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
** Tool-bar-mode
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
			    (agenda . 5 )
			    (bookmarks . 3)
			    (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
		(bookmarks . "book")))
    :config
     (dashboard-setup-startup-hook))
#+end_src

** Word Wrap
#+begin_src emacs-lisp
(setq word-wrap-mode 1)
#+end_src
* PERSONAL SETTINGS
** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer gb/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (gb/leader-keys
      "SPC" '(counsel-M-x :wk "Counsel M-x")
      "." '(find-file :wk "Find file")
      "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
      "TAB TAB" '(comment-line :wk "Comment lines")
      "u" '(universal-argument :wk "Universal argument"))

    (gb/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      ;; "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill current buffer")
      "b K" '(kill-some-buffers :wk "Kill multiple buffers")
      "b l" '(bookmark-jump :wk "Open a Bookmark")
      "b m" '(bookmark-set :wk "Set bookmark")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers")
      "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

    (gb/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current")
      "d t" '(dired-create-empty-file :wk "Dired create and empty file")
      "d p" '(peep-dired :wk "Peep-dired"))

    (gb/leader-keys
      "e" '(:ignore t :wk "Eshell/Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e h" '(counsel-esh-history :which-key "Eshell history")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      "e R" '(eww-reload :which-key "Reload current page in EWW")
      "e s" '(eshell :which-key "Eshell")
      "e w" '(eww :which-key "EWW emacs web wowser"))

    (gb/leader-keys
      "f" '(:ignore t :wk "Files")
      "f c" '((lambda () (interactive)
		(find-file "~/.minemacs.d/config.org"))
	      :wk "Open emacs config.org")
      "f e" '((lambda () (interactive)
		(dired "~/.minemacs.d/emacs/"))
	      :wk "Open user-emacs-directory in dired")
      "f d" '(find-grep-dired :wk "Search for string in files in DIR")
      "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
      "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
      "f l" '(counsel-locate :wk "Locate a file")
      "f r" '(counsel-recentf :wk "Find recent files")
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file"))

    (gb/leader-keys
      "g" '(:ignore t :wk "Git")
      "g /" '(magit-dispatch :wk "Magit dispatch")
      "g ." '(magit-file-dispatch :wk "Magit file dispatch")
      "g b" '(magit-branch-checkout :wk "Switch branch")
      "g c" '(:ignore t :wk "Create")
      "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
      "g c c" '(magit-commit-create :wk "Create commit")
      "g c f" '(magit-commit-fixup :wk "Create fixup commit")
      "g C" '(magit-clone :wk "Clone repo")
      "g f" '(:ignore t :wk "Find")
      "g f c" '(magit-show-commit :wk "Show commit")
      "g f f" '(magit-find-file :wk "Magit find file")
      "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
      "g F" '(magit-fetch :wk "Git fetch")
      "g g" '(magit-status :wk "Magit status")
      "g i" '(magit-init :wk "Initialize git repo")
      "g l" '(magit-log-buffer-file :wk "Magit buffer log")
      "g r" '(vc-revert :wk "Git revert file")
      "g s" '(magit-stage-file :wk "Git stage file")
      "g u" '(magit-stage-file :wk "Git unstage file"))

   (gb/leader-keys
      "h" '(:ignore t :wk "Help")
      "h a" '(counsel-apropos :wk "Apropos")
      "h b" '(describe-bindings :wk "Describe bindings")
      "h c" '(describe-char :wk "Describe character under cursor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs news")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Describe no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h g" '(describe-gnu-project :wk "Describe GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Describe input method")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
      "h L" '(describe-language-environment :wk "Describe language environment")
      "h m" '(describe-mode :wk "Describe mode")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
		  (load-file "~/.config/emacs/init.el")
		  (ignore (elpaca-process-queues)))
		:wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Display full documentation for command"))

    (gb/leader-keys
      "m" '(:ignore t :wk "Org")
      "m a" '(org-agenda :wk "Org agenda")
      "m e" '(org-export-dispatch :wk "Org export dispatch")
      "m i" '(org-toggle-item :wk "Org toggle item")
      "m t" '(org-todo :wk "Org todo")
      "m B" '(org-babel-tangle :wk "Org babel tangle")
      "m x" '(org-toggle-checkbox :wk "Org mark checkbox")
      "m l" '(org-cliplink :wk "Insert a link using org-cliplink")
      "m T" '(org-todo-list :wk "Org todo list"))

    (gb/leader-keys
      "m b" '(:ignore t :wk "Tables")
      "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

    (gb/leader-keys
      "m d" '(:ignore t :wk "Date/deadline")
      "m d t" '(org-time-stamp :wk "Org time stamp"))

    (gb/leader-keys
      "o" '(:ignore t :wk "Open")
      "o d" '(dashboard-open :wk "Dashboard")
      "o e" '(elfeed :wk "Elfeed RSS")
      "o f" '(make-frame :wk "Open buffer in new frame")
      "o F" '(select-frame-by-name :wk "Select frame by name")
      "o o" '(reveal-in-osx-finder :wk "Reveal current folder in OSX Finder")
      )

    (gb/leader-keys
      "s" '(:ignore t :wk "Search")
      "s d" '(dictionary-search :wk "Search dictionary")
      "s m" '(man :wk "Man pages")
      "s t" '(tldr :wk "Lookup TLDR docs for a command")
      "s w" '(jinx-correct :wk "Jinx is a fast spell checker for emacs"))

    (gb/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t e" '(eshell-toggle :wk "Toggle eshell")
      "t f" '(flycheck-mode :wk "Toggle flycheck")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t n" '(synosaurus-choose-and-insert :wk "Lookup and replace under point")
      "t o" '(org-mode :wk "Toggle org mode")
      "t r" '(rainbow-mode :wk "Toggle rainbow mode")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")
      "t v" '(vterm-toggle :wk "Toggle vterm"))

    (gb/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))

    (gb/leader-keys
      "v" '(org-archive-subtree :wk "Archive Org Heading.")
      "y" '(xwidgets-webkit-browse-url :wk "Open a link in xWidgets Webkit")
      "x" '(scratch-buffer :wk "Open the scratch buffer")
      "X" '(org-capture :wk "Start an org-capture")
      )

    )
#+end_src

** Setting Username and E-Mail
#+begin_src emacs-lisp
(setq user-full-name "Gardner Berry"
    user-mail-address "gardner@gardnerberry.com")
#+end_src

** Rainbow Mode
Rainbow mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).

#+begin_src emacs-lisp
;; (define-globalized-minor-mode global-rainbow-mode rainbow-mode
  ;; (lambda ()
    ;; (when (not (memq major-mode
                ;; (list 'org-agenda-mode)))
     ;; (rainbow-mode 1))))
;; (global-rainbow-mode 1 )
#+end_src

** Setting the Default Link Opener
Setting in which browser EMACS will open links
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
#+end_src

** Elfeed
An RSS newsfeed reader for Emacs.
#+begin_src emacs-lisp
;; Module: `me-rss' -- Package: `elfeed'
(with-eval-after-load 'elfeed
  ;; Add news feeds for `elfeed'
  (setq elfeed-feeds
        '(
          ;; General
          ("https://frame.work/blog.rss" Framework)
          ("https://factorio.com/blog/rss" Factorio)
          ("https://news.nononsenseapps.com/index.atom" Feeder)
          ("https://kagifeedback.org/atom/t/release-notes" Kagi)
          ("https://news.play.date/index.xml" Playdate)
          ;; Linux
          ("https://blog.linuxmint.com/?feed=rss2" LinuxMint linux)
          ("https://archlinux.org/news/" Arch linux)
          ("https://fedoramagazine.org/feed/" Fedora linux)
          ("https://endeavouros.com/news/" EndeavourOS linux)
          ;; Boat Stuff
          ("https://buffalonickelblog.com/feed/" Buffalo-Nickel boat)
          ("https://mobius.world/feed/" Mobius boat)
          ("https://www.mvuglybetty.com/blog-feed.xml" Ugly-Betty boat)
           ;; Emacs
          ("http://xenodium.com/rss.xml" Xenodium emacs)
          ("https://cmdln.org/post/" Commandline emacs)
          ("https://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-and-content.xml" emacs Karal-Voit)
          ("https://systemcrafters.net/rss/news.xml" SystemCrafter emacs)
          ("https://sachachua.com/blog/feed/" SachaChua emacs)
          ("https://rostre.bearblog.dev/feed/?type=rss" ParsingTime emacs)
          ("https://200ok.ch/atom.xml" 200ok emacs)
          ;; ("https://planet.emacslife.com/atom.xml" PlanetEmacsLife emacs)
          ("https://blog.tecosaur.com/tmio/rss.xml" TMiO emacs)
          ;; News
          )))

(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

#+end_src
*** Open In a specific browser
#+begin_src emacs-lisp
(defun elfeed-xwidgets-open (&optional use-generic-p)
  "open with xWidgets"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (xwidget-webkit-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; (map! :leader
      ;; :map elfeed-mode-map
     ;; (:desc "Open article form Elfeed in xWidgets" "o w" #'elfeed-xwidgets-open))
#+end_src

** Use-package
#+begin_src emacs-lisp
(setq package-archive-priorities '(("gnu" . 10)
                                   ("melpa" . 5))
      package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://stable.melpa.org/packages/")
                         ("melpa-devel" . "https://melpa.org/packages/")))
#+end_src

** OSX Reveal in Finder
#+begin_src emacs-lisp
(use-package reveal-in-osx-finder
  )
#+end_src

** Yeetube
#+begin_src emacs-lisp
(use-package yeetube
  )
(setq yeetube-player 'IINA)
#+end_src

** Bookmarks
#+begin_src emacs-lisp
 (setq bookmark-default-file "~/.config/emacs/bookmarks")  ; Set the bookmark file
      (setq bookmark-save-flag 1)                         ; Save bookmarks after every change

#+end_src
** Eperiodic
A Periodic table package for emacs.
#+begin_src emacs-lisp
(load "~/.config/emacs/eperiodic.el")
#+end_src

** EVIL
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+end_src

* ORG-MODE
Here is where I set my various configurations for org-mode. Ranging from agenda to org-superstar.
** Org-Settings
#+begin_src emacs-lisp
;; Module: `me-org' -- Package: `org'
(with-eval-after-load 'org
  (setq org-directory "~/Documents/"
        ;; Set where org agenda get todos from
        org-agenda-files '("~/Documents/agenda.org" "~/Documents/To-Research.org" "~/Documents/inbox.org" "~/Documents/notes.org" "~/Documents/books.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        ;; Set where archive org-headings go
        org-archive-location "~/Documents/Archive/archive.org::"
        ;; Set org-ellipsis
        ;; org-ellipsis " ↴ "
        ;; org-ellipsis" ⤷ "
        org-ellipsis " ... "
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "NEXT(n)"           ; This is for something that I am in the process of doing (for example reading a book)
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" ))) ; Task has been cancelled
  )
(add-hook 'org-mode-hook (lambda () (global-display-line-numbers-mode -1)))
#+end_src

** Org-fonts
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org-agenda
This is a way for me to archive my TODOs from my Schedule.org. As well as put TODO's into file for mildly interesting things that I want to look at someday.
#+begin_src emacs-lisp

(setq org-archive-default-command 'org-archive-subtree)

;;(map! :leader
;;      (:desc "Archive Org-Todos" "v" org-archive-default-command))

(with-eval-after-load 'org
  (setq org-agenda-deadline-leaders '("" "" "%2d d. ago: ")
      org-deadline-warning-days 0
      org-agenda-span 7
      org-agenda-start-day "-0d"
      org-agenda-skip-function-global '(org-agenda-skip-entry-if 'todo 'done)
      org-log-done 'time
      )
)
#+end_src

** Org-capture
I copy and pasted most of this from a very interesting blog post by [[https://karelvo.com/orgmode/][KarelVO]] on how they manage their TODO's. The Org-agenda simplification above is also taken from there.
#+begin_src emacs-lisp

(with-eval-after-load 'org-capture
  (setq org-capture-templates
        '(("t" "todo" entry (file "~/Documents/agenda.org")
           "* TODO %?\n  %i\n  %a")
          ("T" "todo today" entry (file "~/Documents/agenda.org")
           "* TODO %?\n  %i\nDEADLINE: %t\n  %a")
          ("i" "inbox" entry (file "~/Documents/inbox.org")
           "* %?")
          ("v" "clip to inbox" entry (file "~/Documents/inbox.org")
           "* %x%?")
          ("c" "call someone" entry (file "~/Documents/inbox.org")
           "* TODO Call %?\n %U")
          ("p" "phone call" entry (file "~/Documents/inbox.org")
           "* Call from %^{Caller name}\n %U\n %i\n")
          )))
#+end_src

** Org-export
I have setup org-export to include Twitter Bootstrap to make pretty HTML pages, Reveal.js allows to export org to a HTML presentation, Github Flavored Markdown to export to Joplin, and finaly Pandoc for exporting to other formats like .docx and .pptx and manny manny others.
=NOTE=: I also enable ox-publish for converting an Org site into an HTML site, but that is done in init.el (org +publish).

#+begin_src emacs-lisp

(use-package ox-twbs
  )
(use-package ox-pandoc
  )
(use-package ox-gfm
  )
(use-package org-re-reveal
  )
;; (use-package ox-reveal
  ;; )
(use-package ox-epub
  )
;; Make it so that org-export wont use numbered headings
(setq org-export-with-section-numbers nil)
;; Disable Timestamping
(setq org-export-time-stamp-file nil)
#+end_src

*** OX-Reveal
Org-Reveal is a package that allows you to export your org documents to Reveal.js to make pretty presentations. I also have a macro to allow me no hide content from said presentations.
#+begin_src emacs-lisp
;; Reveal.js + Org mode
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
      ;; org-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h3>emailme@gardnerberry.com</h3><h5>@Gamewarrior010@social.linux.pizza</h5>"
      org-re-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h3>gardner.berry@crms.org</h3><h5>@Gamewarrior010@social.linux.pizza</h5>"
      ;; org-re-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h3>gardner.berry@crms.org</h3>"
      org-reveal-theme "moon"
      org-re-reveal-theme "moon"
      ;; org-re-reveal-theme "blood"
      org-re-reveal-transition "slide"
      org-reveal-plugins '(markdown notes math search zoom))

(defun set-ignored-headlines-tags (backend)
     "Remove all headlines with tag ignore_heading in the current buffer.
        BACKEND is the export back-end being used, as a symbol."
     (cond ((org-export-derived-backend-p backend 'md) (setq  org-export-exclude-tags '("noexport" "mdignore")))
           ((org-export-derived-backend-p backend 'reveal) (setq  org-export-exclude-tags '("noexport" "revealignore")))
           (t (setq  org-export-exclude-tags '("noexport")))
       ))
#+end_src

** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.

#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+end_src

** Org-Novelist
#+begin_src emacs-lisp
(load "~/.config/doom/org-novelist.el")
    (setq org-novelist-language-tag "en-US"  ; The interface language for Org Novelist to use. It defaults to 'en-GB' when not set
          org-novelist-author "Gardner Berry")  ; The default author name to use when exporting a story. Each story can also override this setting
          ;; org-novelist-author-email "gardner@gamewarrior.xyz"  ; The default author contact email to use when exporting a story. Each story can also override this setting
          ;; org-novelist-automatic-referencing-p nil)  ; Set this variable to 't' if you want Org Novelist to always keep note links up to date. This may slow down some systems when operating on complex stories. It defaults to 'nil' when not set
#+end_src

** Toc-Org

#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode)
  :hook (markdown-mode . toc-org-mode)
  )
#+end_src

** Org-Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-item-bullet-alist '((?- . ?➤) (?+ . ?✦)) ; changes +/- symbols in item lists
)
)

#+end_src

** Org-Cliplink
#+begin_src emacs-lisp
(use-package org-cliplink
  )
#+end_src
** Org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
  )
#+end_src
** org-insert-item
#+begin_src emacs-lisp
(defun +org--insert-item (direction)
  (let ((context (org-element-lineage
                  (org-element-context)
                  '(table table-row headline inlinetask item plain-list)
                  t)))
    (pcase (org-element-type context)
      ;; Add a new list item (carrying over checkboxes if necessary)
      ((or `item `plain-list)
       (let ((orig-point (point)))
         ;; Position determines where org-insert-todo-heading and `org-insert-item'
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (end-of-line))
         (let* ((ctx-item? (eq 'item (org-element-type context)))
                (ctx-cb (org-element-property :contents-begin context))
                ;; Hack to handle edge case where the point is at the
                ;; beginning of the first item
                (beginning-of-list? (and (not ctx-item?)
                                         (= ctx-cb orig-point)))
                (item-context (if beginning-of-list?
                                  (org-element-context)
                                context))
                ;; Horrible hack to handle edge case where the
                ;; line of the bullet is empty
                (ictx-cb (org-element-property :contents-begin item-context))
                (empty? (and (eq direction 'below)
                             ;; in case contents-begin is nil, or contents-begin
                             ;; equals the position end of the line, the item is
                             ;; empty
                             (or (not ictx-cb)
                                 (= ictx-cb
                                    (1+ (point))))))
                (pre-insert-point (point)))
           ;; Insert dummy content, so that `org-insert-item'
           ;; inserts content below this item
           (when empty?
             (insert " "))
           (org-insert-item (org-element-property :checkbox context))
           ;; Remove dummy content
           (when empty?
             (delete-region pre-insert-point (1+ pre-insert-point))))))
      ;; Add a new table row
      ((or `table `table-row)
       (pcase direction
         ('below (save-excursion (org-table-insert-row t))
                 (org-table-next-row))
         ('above (save-excursion (org-shiftmetadown))
                 (+org/table-previous-row))))

      ;; Otherwise, add a new heading, carrying over any todo state, if
      ;; necessary.
      (_
       (let ((level (or (org-current-level) 1)))
         ;; I intentionally avoid `org-insert-heading' and the like because they
         ;; impose unpredictable whitespace rules depending on the cursor
         ;; position. It's simpler to express this command's responsibility at a
         ;; lower level than work around all the quirks in org's API.
         (pcase direction
           (`below
            (let (org-insert-heading-respect-content)
              (goto-char (line-end-position))
              (org-end-of-subtree)
              (insert "\n" (make-string level ?*) " ")))
           (`above
            (org-back-to-heading)
            (insert (make-string level ?*) " ")
            (save-excursion (insert "\n"))))
         (run-hooks 'org-insert-heading-hook)
         (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                     (todo-type    (org-element-property :todo-type context)))
           (org-todo
            (cond ((eq todo-type 'done)
                   ;; Doesn't make sense to create more "DONE" headings
                   (car (+org-get-todo-keywords-for todo-keyword)))
                  (todo-keyword)
                  ('todo)))))))

    (when (org-invisible-p)
      (org-show-hidden-entry))
    (when (and (bound-and-true-p evil-local-mode)
               (not (evil-emacs-state-p)))
      (evil-insert 1))))
#+end_src

*** insert-item-below
#+begin_src emacs-lisp
;;;###autoloa
(defun +org/insert-item-below (count)
  "Inserts a new heading, table cell or item below the current one."
  (interactive "p")
  (dotimes (_ count) (+org--insert-item 'below)))

;;;###autoload
(defun +org/insert-item-above (count)
  "Inserts a new heading, table cell or item above the current one."
  (interactive "p")
  (dotimes (_ count) (+org--insert-item 'above)))

#+end_src

*** Bind that to a key
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "<C-return>") '+org/insert-item-below)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
;; (use-package org-tempo)
#+end_src

* WRITING STUFF
** Typing Practice
The typing-practice package runs solely in the minibuffer, so your boss thinks you are working 😊. It utilizes a database of the 1000 most commonly used English words, and let’s you customize how easy or difficult a session will be through a couple of variables. Before long, your hand should have a good feel for all of the most common English morphemes, giving you the foundation to quickly build other words with morphemes you’ve already learned. For example, after you have learned to type the word “the” (the most common English word) you will have a building block for quickly typing “there”, “these”, “their”, “father”, “they”, “other”, “together”, etc.
#+begin_src emacs-lisp
(load "~/.config/doom/typing-practice.el")

(defadvice practice-typing (around no-cursor activate)
  "Do not show cursor at minibuffer during typing practice."
  (let ((minibuffer-setup-hook
         (cons (lambda () (setq cursor-type nil))
               minibuffer-setup-hook)))
    ad-do-it))
#+end_src

** Nov.el
nov.el provides a major mode for reading EPUB documents
#+begin_src emacs-lisp
(setq nov-unzip-program (executable-find "bsgbar")
      nov-unzip-args '("-xC" directory "-f" filename))
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  )
(setq olivetti-style 'fringes-and-margins)
#+end_src
** Palimpsest-Mode
This minor mode for Emacs provides several strategies to remove text without permanently deleting it. Namely, it provides the following capabilities:
| Keybindings | Action                                         |
|-------------+------------------------------------------------|
| C-c C-r     | Send selected text to the bottom of the buffer |
| C-c C-s     | Send selected text to the top of the buffer    |
| C-c C-q     | Send selected text to a trash file             |

Much like code, the process of writing text is a progression of revisions where content gets transformed and refined. During these iterations, it is often desirable to move text instead of deleting it: you may have written a sentence that doesn't belong in the paragraph you're editing right now, but it might fit somewhere else. Since you don't know where exactly, you'd like to put it out of the way, not discard it entirely. Palimpsest saves you from the traveling back and forth between your current position and the bottom of your document (or another draft or trash document).

Next time you're writing fiction, non-fiction, a journalistic piece or a blog post using Emacs, give palimpsest-mode a try. You might even try it while coding in a functional language, moving stuff around sprightly, aided by an abstraction reminiscent of the Read-Eval-Print loop, yet completely orthogonal.
#+begin_src emacs-lisp
(use-package palimpsest
  )
(add-hook 'text-mode-hook 'palimpsest-mode)

;; (map!
       ;; :leader
      ;; (:desc "Palimpsest-Send-Bottom" "n g" palimpsest-send-bottom))
#+end_src

** Abbrev-Mode
Auto expansion for Abbrev-mode.
#+begin_src emacs-lisp
;; Enable abbreviation mode
  (dolist (hook '(org-mode-hook
                    text-mode-hook))
      (add-hook hook #'abbrev-mode))
(quietly-read-abbrev-file "~/.minemacs.d/abbrev_defs")
#+end_src

** YAsnippet
YASnippet is a tool that allows you to create templates do allow you to write less boilerplate when starting documents.
#+begin_src emacs-lisp
  (use-package yasnippet
    )
  (setq yas-snippet-dirs '("~/Documents/emacs-stuff/snippets"))
  ;; (yas-global-mode 1)
#+end_src

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.
#+begin_src emacs-lisp
(use-package magit)

  (use-package magit-todos
    :after magit
    :config (magit-todos-mode 1))
#+end_src

** Spell Checker
Jinx is a fast just-in-time spell-checker for Emacs.
#+begin_src emacs-lisp
   ;; (use-package jinx
  ;; :hook (emacs-startup . global-jinx-mode))
#+end_src

** Thesarus
Synosaurus is a thesaurus fontend for Emacs with pluggable backends.
#+begin_src emacs-lisp
(use-package synosaurus
  )
#+end_src

* Reading Stuff
** Nov
nov.el provides a major mode for reading EPUB documents
#+begin_src emacs-lisp
(setq nov-unzip-program (executable-find "bsdtar")
      nov-unzip-args '("-xC" directory "-f" filename))
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

* ESHELL
** Aliases
#+begin_src emacs-lisp
(setq eshell-aliases-file "~/.config/doom/eshell/aliases")
#+end_src
** Prompt
#+begin_src emacs-lisp
(with-eval-after-load "esh-opt"
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda))
#+end_src
* AI ASSIANTS
** Ellama
#+begin_src emacs-lisp
;; (setq ellama-buffer-mode "org-mode")
(use-package ellama
  )
(setopt ellama-language "English")
#+end_src

** Chatgpt-Shell
#+begin_src emacs-lisp
(use-package chatgpt-shell
  :config
  (setq chatgpt-shell-openai-key "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")
  )
#+end_src

* SOCIAL MEDIA
** Mastodon
mastodon.el is an Emacs client for the AcitivityPub social networks that implement the Mastodon API.
#+begin_src emacs-lisp
(use-package mastodon
  :config
  (setq mastodon-instance-url "https://social.linux.pizza"
      mastodon-active-user "Gamewarrior010")
  )
#+end_src
** Lemmy
lem.el is an Emacs client for the federated link aggregator Lemmy.
#+begin_src emacs-lisp
(use-package lem
  :config
(setq lem-instance-url "https://lemmy.world")
(setq lem-current-user "GameWarrior"))
#+end_src
* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
   (setq dired-open-extensions '(("gif" . "sxiv")
                                 ("jpg" . "sxiv")
                                 ("png" . "sxiv")
                                 ("mkv" . "IINA")
                                 ("mp4" . "IINA"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

    ;; (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    ;; (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package

(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package diredfl
  :hook
  (dired-mode . diredfl-mode))



(cond ((eq system-type 'darwin)
       (setq dired-use-ls-dired t
             insert-directory-program "/opt/homebrew/bin/gls"
             dired-listing-switches "-aBhl --group-directories-first")
       ))
#+end_src

* CODING
So I need to program a couple of different languages regularly. Mostly Nix for NixOS and Lua for configuring Awesome WM.
** Nix-Mode
Nix is a cross-platform package manager that uses a deployment model where software is installed into unique directories generated through cryptographic hashes. It is also the name of the tool's programming language. Here are some of the tools that I am using for writing nix.
#+begin_src emacs-lisp
(use-package nix-mode
  )

(use-package ob-nix
  )

(use-package nixpkgs-fmt
  )
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :diminish
      :config 
	(counsel-mode)
	(setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :diminish
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package nerd-icons-ivy-rich
      :ensure t
      :config
      (setq nerd-icons-ivy-rich-icon t)
      (setq nerd-icons-ivy-rich-color-icon t)
      (setq inhibit-compacting-font-caches t)
      :init (nerd-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
       ivy-rich-switch-buffer-align-virtual-buffer t
       ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
				   'ivy-rich-switch-buffer-transformer))

#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

#+title: GW's Doom Emacs Config
#+description: My personal Doom Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes
#+startup: showeverything
#+options: num:nil

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
  - [[#why-emacs][Why Emacs]]
- [[#sensible-defaults][SENSIBLE DEFAULTS]]
  - [[#setting-the-default-link-opener][Setting the Default Link Opener]]
- [[#gui-changes][GUI CHANGES]]
  - [[#doom-theme][Doom Theme]]
  - [[#title-bar][Title Bar]]
  - [[#beacon][Beacon]]
  - [[#fonts][Fonts]]
  - [[#doom-modeline][Doom-Modeline]]
  - [[#insert-date][Insert Date]]
  - [[#ibuffer][IBuffer]]
  - [[#doom-dashboard][Doom-Dashboard]]
  - [[#menu-bar][Menu Bar]]
- [[#personal-settings][PERSONAL SETTINGS]]
  - [[#chatgpt-shell][Chatgpt-Shell]]
  - [[#dall-e-shell][Dall-E-Shell]]
  - [[#setting-username-and-e-mail][Setting Username and E-Mail]]
  - [[#emojis][Emojis]]
  - [[#line-settings][Line Settings]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#xwidgets-browser][xWidgets-Browser]]
  - [[#elfeed][Elfeed]]
  - [[#pojectile-root][Pojectile Root]]
  - [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#writing-stuff][WRITING STUFF]]
  - [[#typing-practice][Typing Practice]]
  - [[#synosaurus][Synosaurus]]
  - [[#novel][Nov.el]]
  - [[#writegood-mode][Writegood-Mode]]
  - [[#writeroom][Writeroom]]
  - [[#spell-checker][Spell Checker]]
  - [[#olivetti][Olivetti]]
  - [[#palimpsest-mode][Palimpsest-Mode]]
  - [[#grammar-checker][Grammar Checker]]
  - [[#abbrev-mode][Abbrev-Mode]]
- [[#programming-stuff][PROGRAMMING STUFF]]
  - [[#blamer][Blamer]]
  - [[#magit][Magit]]
  - [[#yasnippet][YAsnippet]]
  - [[#web-mode][Web-Mode]]
- [[#dired][Dired]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
- [[#mu4e][mu4e]]
  - [[#context][context]]
  - [[#sending][sending]]
  - [[#optional][optional]]
- [[#markdown][Markdown]]
- [[#org-mode][ORG-MODE]]
  - [[#org-settings][Org-Settings]]
  - [[#org-fonts][Org-fonts]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-capture][Org-capture]]
  - [[#org-export][Org-export]]
  - [[#org-journal][Org-journal]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#custom-functions][Custom Functions]]
  - [[#org-novelist][Org-Novelist]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#social-media][Social Media]]
  - [[#mastodon][Mastodon]]
  - [[#lemmy][Lemmy]]
- [[#eshell][Eshell]]
  - [[#aliases][Aliases]]
  - [[#prompt][Prompt]]
- [[#ai-stuff][AI Stuff]]
  - [[#ellama][Ellama]]

* ABOUT THIS CONFIG
This is my Doom Emacs Config. I have built this over the last couple of months mainly from DistroTube's config.
#+begin_src emacs-lisp
;;    _____ __          __
;;  / ____| \ \        / / GameWarrior
;; | |  __   \ \  /\  / /  https://github.com/game-warrior
;; | | |_ |   \ \/  \/ /   @gamewarrior010@social.linux.pizza
;; | |__| |    \  /\  /    https://www.gnu.org/software/emacs/
;;  \_____|     \/  \/     https://:github.com/doomemacs/doomemacs
#+end_src

** Why Emacs
I highly recommend that you checkout this [[https://tecosaur.github.io/emacs-config/config.html][this blog post/config by Tecosaur]] it covers way more about Doom Emacs that I want to here but to quote an excerpt from it.
#+begin_quote
Emacs is not a text editor, this is a common misnomer. It is far more apt to describe Emacs as a Lisp machine providing a generic user-centric text manipulation environment. That’s quite a mouthful. In simpler terms one can think of Emacs as a platform for text-related applications. It’s a vague and generic definition because Emacs itself is generic.

Good with text. How far does that go? A lot further than one initially thinks:

Task planning
File management
Terminal emulation
Email client
Remote server tool
Git frontend
Web client/server
and more…
Ideally, one may use Emacs as the interface to perform input → transform → output cycles, i.e. form a bridge between the human mind and information manipulation.
#+end_quote

* SENSIBLE DEFAULTS
** Setting the Default Link Opener
Setting in which browser EMACS will open links
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-default-browser)
#+end_src

* GUI CHANGES
** Doom Theme
Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
(map! :leader
      :desc "Load new theme" "h t" #'load-theme)
#+end_src

** Title Bar
Change the title bar format
#+begin_src emacs-lisp
    (setq frame-title-format "Hey bro, just FYI, this buffer is called %b or something like that.")
#+end_src

** Beacon
Never lose your cursor.  When you scroll, your cursor will shine!  This is a global minor-mode. Turn it on everywhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

** Fonts
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JuliaMono" :size 15)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "JuliaMono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t))
#+END_SRC

** Doom-Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-18")
(setq doom-modeline-height 25     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-major-mode-icon t  ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-enable-word-count '(markdown-mode gfm-mode org-mode fountain-mode) ;; Show word count
      )
#+end_src
** Insert Date
Some custom functions to insert the date.  The function 'insert-todays-date' can be used one of three different ways: (1) just the keybinding without the universal argument prefix, (2) with one universal argument prefix, or (3) with two universal argument prefixes.  The universal argument prefix is 'SPC-u' in Doom Emacs (C-u in standard GNU Emacs).  The function 'insert-any-date' only outputs to one format, which is the same format as 'insert-todays-date' without a prefix.

| COMMAND               | EXAMPLE OUTPUT            | KEYBINDING            |
|-----------------------+---------------------------+-----------------------|
| gw/insert-todays-date | Friday, November 19, 2021 | SPC i d t             |
| gw/insert-todays-date | 11-19-2021                | SPC u SPC i d t       |
| gw/insert-todays-date | 2021-11-19                | SPC u SPC u SPC i d t |
| gw/insert-any-date    | Friday, November 19, 2021 | SPC i d a             |

#+begin_src emacs-lisp
(defun gw/insert-todays-date (prefix)
  (interactive "P")
  (let ((format (cond
                 ((not prefix) "%A, %B %d, %Y")
                 ((equal prefix '(4)) "%m-%d-%Y")
                 ((equal prefix '(16)) "%Y-%m-%d"))))
    (insert (format-time-string format))))

(require 'calendar)
(defun gw/insert-any-date (date)
  "Insert DATE using the current locale."
  (interactive (list (calendar-read-date)))
  (insert (calendar-date-string date)))

(map! :leader
      (:prefix ("i d" . "Insert date")
        :desc "Insert any date" "a" #'gw/insert-any-date
        :desc "Insert todays date" "t" #'gw/insert-todays-date))
#+end_src

** IBuffer
I changed some of the default keybindings in IBuffer so that "h" will close the current buffer and "l" will open the currently selected buffer.
#+begin_src emacs-lisp
(map! :after ibuffer
      :map ibuffer-mode-map
      :n "l" #'ibuffer-visit-buffer
      :n "h" #'kill-current-buffer)
#+end_src

** Doom-Dashboard
This is where I customize the DOOM emacs Dashboard. I have a custom banner set. I have also disabled some of the short cuts on the default start page. It will alsow show you a different message based on what OS you are running.
#+begin_src emacs-lisp
(assoc-delete-all "Open project" +doom-dashboard-menu-sections)
(assoc-delete-all "Recently opened files" +doom-dashboard-menu-sections)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)

(cond ((eq system-type 'darwin)
       (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by the  walled garden!"))))
      ((eq system-type 'gnu/linux)
        (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered bye 󰆚 Oxen and 󰻀 Penguins!"))))
      ((eq system-type 'windows-nt)
       (add-hook! '+doom-dashboard-functions :append
         (insert "\n" (+doom-dashboard--center +doom-dashboard--width "Powered by Proprietary Garbage!")))))

(defun gw/doom-art1 ()
  (let* ((banner'("______ _____ ____ ___ ___"
                  "`  _  V  _  V  _ \\|  V  ´"
                  "| | | | | | | | | |     |"
                  "| | | | | | | | | | . . |"
                  "| |/ / \\ \\| | |/ /\\ |V| |"
                  "|   /   \\__/ \\__/  \\| | |"
                  "|  /                ' | |"
                  "| /     E M A C S     \\ |"
                  "´´                     ``"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

;; (setq +doom-dashboard-ascii-banner-fn #'gw/doom-art1)
(setq fancy-splash-image (concat doom-private-dir "images/emacs-e-logo.png"))
#+end_src

** Menu Bar
Setting menu-bar-mode to be disabled because I think it takes up to much screen real estate in the top bar.
#+begin_src emacs-lisp
(add-hook 'doom-after-init-hook (lambda ()
                                  (tool-bar-mode 1)
                                  (tool-bar-mode 0)))
;; (add-hook 'doom-after-init-hook (lambda ()
                                  ;; (menu-bar-mode 1)
                                  ;; (menu-bar-mode 0)))
(setq menu-bar-mode 0)
;; (define-key global-map [menu-bar options] nil)
;; (define-key global-map [menu-bar file] nil)
;; (define-key global-map [menu-bar File] nil)
;; (define-key global-map [menu-bar edit] nil)
;; (define-key global-map [menu-bar tools] nil)
;; (define-key global-map [menu-bar buffer] nil)
;; (define-key global-map [menu-bar help-menu] nil)
;; (define-key global-map [menu-bar Table] nil)
;; (define-key global-map [menu-bar Org] nil)
;; (define-key global-map [menu-bar Text] nil)
;; (define-key global-map [menu-bar Jinx] nil)
#+end_src

* PERSONAL SETTINGS
** Chatgpt-Shell
#+begin_src emacs-lisp
(setq chatgpt-shell-openai-key "placeholder")
;; (setq chatgpt-shell-model-versions	 GPT-4)
#+end_src

** Dall-E-Shell
#+begin_src emacs-lisp
(setq dall-e-shell-openai-key "placeholder")

#+end_src


** Setting Username and E-Mail
#+begin_src emacs-lisp
(setq user-full-name "Gardner Berry"
    user-mail-address "gardner@gardnerberry.com")
#+end_src

** Emojis
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
;; (use-package emojify
  ;; :hook (after-init . global-emojify-mode))

#+end_src

** Line Settings
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me. The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                               | KEYBINDING  |
|--------------------------+-------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
;;(add-hook org-mode
;;(setq display-line-numbers-type nil)
;;)
(setq display-line-numbers-type 1)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+END_SRC

** Rainbow Mode
Rainbow mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in.  The following creates a global minor mode for rainbow-mode and enables it (exception: org-agenda-mode since rainbow-mode destroys all highlighting in org-agenda).

#+begin_src emacs-lisp
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

** xWidgets-Browser
#+begin_src emacs-lisp
(map!
 :leader
 (:desc "Open Xwidgets URL" "y" #'xwidget-webkit-browse-url))
#+end_src

** Elfeed
An RSS newsfeed reader for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

(add-hook 'elfeed-show-mode-hook 'visual-line-mode)
(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)

(setq elfeed-feeds (quote
                     (
                     ;; General
                     ("https://frame.work/blog.rss" Framework)
                     ;; Linux
                     ("https://blog.linuxmint.com/?feed=rss2" linux LinuxMint)
                     ("https://archlinux.org/news/" linux Arch)
                     ("https://fedoramagazine.org/feed/" linux Fedora)
                     ("https://endeavouros.com/news/" linux EndeavourOS)
                     ;; Boat Stuff
                     ("https://buffalonickelblog.com/feed/" Buffalo-Nickle boat)
                     ("https://mobius.world/feed/" Mobius boat)
                     ;; Emacs
                     ("http://xenodium.com/rss.xml" emacs Xenodium)
                     ("https://cmdln.org/post/" emacs Commandline)
                     ("https://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-and-content.xml" Karal-Voit emacs)
                     ("https://systemcrafters.net/rss/news.xml" emacs SystemCrafter)
                     ("https://sachachua.com/blog/feed/" emacs SachaChua)
                     )))
#+END_SRC

** Pojectile Root
#+begin_src emacs-lisp
(after! projectile (setq projectile-project-root-files-bottom-up (remove ".git"
projectile-project-root-files-bottom-up))
  (lambda ()
    (projectile-add-known-project "~/Documents")
    (projectile-add-known-project "~/Developer/Projects/blog")
    ;; (projectile-add-known-project "~/Developer/Projects/")
  ))
#+end_src

** OPEN SPECIFIC FILES
Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with 'C-x C-f' in GNU Emacs or 'SPC f f' in Doom Emacs.  These keybindings use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindings is 'SPC =' plus 'key' since Doom Emacs does not use 'SPC ='.

| PATH TO FILE                   | DESCRIPTION           | KEYBINDING |
|--------------------------------+-----------------------+------------|
| ~/Org/agenda.org               | /Edit agenda file/      | SPC = a    |
| ~/.config/doom/config.org      | /Edit doom config.org/  | SPC = c    |
| ~/.config/doom/init.el         | /Edit doom init.el/     | SPC = i    |
| ~/.config/doom/packages.el     | /Edit doom packages.el/ | SPC = p    |
| ~/.config/doom/eshell/aliases  | /Edit eshell aliases/   | SPC = e a  |
| ~/.config/doom/eshell/profile  | /Edit eshell profile/   | SPC = e p  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit agenda file" "a" #'(lambda () (interactive) (find-file "~/Documents/agenda.org"))
       :desc "Edit doom config.org" "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit doom init.el" "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el" "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))))
(map! :leader
      (:prefix ("= e" . "open eshell files")
       :desc "Edit eshell aliases" "a" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
       :desc "Edit eshell profile" "p" #'(lambda () (interactive) (find-file "~/.config/doom/eshell/profile"))))
#+END_SRC


* WRITING STUFF
** Typing Practice
The typing-practice package runs solely in the minibuffer, so your boss thinks you are working 😊. It utilizes a database of the 1000 most commonly used English words, and let’s you customize how easy or difficult a session will be through a couple of variables. Before long, your hand should have a good feel for all of the most common English morphemes, giving you the foundation to quickly build other words with morphemes you’ve already learned. For example, after you have learned to type the word “the” (the most common English word) you will have a building block for quickly typing “there”, “these”, “their”, “father”, “they”, “other”, “together”, etc.
#+begin_src emacs-lisp
(load "~/.config/doom/typing-practice.el")

(defadvice practice-typing (around no-cursor activate)
  "Do not show cursor at minibuffer during typing practice."
  (let ((minibuffer-setup-hook
         (cons (lambda () (setq cursor-type nil))
               minibuffer-setup-hook)))
    ad-do-it))
#+end_src


** Synosaurus
Synosaurus is a thesaurus fontend for Emacs with pluggable backends.
#+begin_src emacs-lisp
(map!
 :leader
 (:desc "List Synonyms for word at point" "t n" #'synosaurus-choose-and-insert))
#+end_src
** Nov.el
nov.el provides a major mode for reading EPUB documents
#+begin_src emacs-lisp
(setq nov-unzip-program (executable-find "bsdtar")
      nov-unzip-args '("-xC" directory "-f" filename))
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

** Writegood-Mode
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'writegood-mode)

(setq gw/weasel-words
      '("actually"
        "basically"
        "easily"
        "easy"
        "simple"
        "simply"))
;; (setq writegood-weasel-words
      ;; (-concat writegood-weasel-words gw/weasel-words))
;; (map!
        ;; :leader
        ;; (:desc ""))
#+end_src

** Writeroom
I think Doom is a bit over-zealous when zooming in.
#+begin_src emacs-lisp
(setq +zen-text-scale 0.8)
#+end_src

** Spell Checker
This is where I set GNU Aspell as my default spell checker.
#+begin_src emacs-lisp
(use-package jinx
  :hook (emacs-startup . global-jinx-mode))

(map! :leader
      (:desc "Check Word" "s w" #'jinx-correct))
#+end_src

** Olivetti
#+begin_src emacs-lisp
(setq olivetti-style 'fringes-and-margins)
#+end_src
** Palimpsest-Mode
This minor mode for Emacs provides several strategies to remove text without permanently deleting it. Namely, it provides the following capabilities:
| Keybindings | Action                                         |
|-------------+------------------------------------------------|
| C-c C-r     | Send selected text to the bottom of the buffer |
| C-c C-s     | Send selected text to the top of the buffer    |
| C-c C-q     | Send selected text to a trash file             |

Much like code, the process of writing text is a progression of revisions where content gets transformed and refined. During these iterations, it is often desirable to move text instead of deleting it: you may have written a sentence that doesn't belong in the paragraph you're editing right now, but it might fit somewhere else. Since you don't know where exactly, you'd like to put it out of the way, not discard it entirely. Palimpsest saves you from the traveling back and forth between your current position and the bottom of your document (or another draft or trash document).

Next time you're writing fiction, non-fiction, a journalistic piece or a blog post using Emacs, give palimpsest-mode a try. You might even try it while coding in a functional language, moving stuff around sprightly, aided by an abstraction reminiscent of the Read-Eval-Print loop, yet completely orthogonal.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'palimpsest-mode)

;; (map!
       ;; :leader
      ;; (:desc "Palimpsest-Send-Bottom" "n g" palimpsest-send-bottom))
#+end_src

** Grammar Checker
#+begin_src emacs-lisp
;; (require 'flycheck-vale)
;; (flycheck-vale-setup)
(flycheck-mode -1)
#+end_src
** Abbrev-Mode
Auto expansion for Abbrev-mode.
#+begin_src emacs-lisp
;; Enable abbreviation mode
  (dolist (hook '(org-mode-hook
                    text-mode-hook))
      (add-hook hook #'abbrev-mode))
#+end_src
* PROGRAMMING STUFF
** Blamer
A git blame plugin for emacs inspired by [[https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens][VS Code’s GitLens plugin]] and [[https://github.com/APZelos/blamer.nvim][Vim plugin.]]
#+begin_src emacs-lisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 140
                    :italic t))))
  ;; :config
  ;; (global-blamer-mode 1))
#+end_src

** Magit
Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git command-line interface and various GUIs, letting you perform trivial as well as elaborate version control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of what you get after running a few Git commands but in Magit every bit of visible information is also actionable to an extent that goes far beyond what any Git GUI provides and it takes care of automatically refreshing this output when it becomes outdated. In the background Magit just runs Git commands and if you wish you can see what exactly is being run, making it possible for you to learn the git command-line by using Magit. So I added a keybinding to open Magit instead of having to use <M-x> every time.
#+begin_src emacs-lisp
(map! :leader
      (:desc "Open Magit" "g m" #'magit))
#+end_src

** YAsnippet
YASnippet is a tool that allows you to create templates do allow you to write less boilerplate when starting documents.
#+begin_src emacs-lisp
(setq yas-snippet-dirs '("~/Documents/emacs-stuff/snippets"))
(yas-global-mode 1)
#+end_src

** Web-Mode
These are my hooks for web-mode.
#+begin_src emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+end_src

* Dired
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                 | DESCRIPTION                                 | KEYBINDING |
|-------------------------+---------------------------------------------+------------|
| dired-view-file         | /View file in dired/                          | SPC d v    |
| dired-up-directory      | /Go up in directory tree/                     | h          |
| dired-find-file         | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line         | Move down to next line                      | j          |
| dired-previous-line     | Move up to previous line                    | k          |
| dired-mark              | Mark file at point                          | m          |
| dired-unmark            | Unmark file at point                        | u          |
| dired-do-copy           | Copy current file or marked files           | C          |
| dired-do-rename         | Rename current file or marked files         | R          |
| dired-hide-details      | Toggle detailed listings on/off             | (          |
| dired-git-info-mode     | Toggle git information on/off               | )          |
| dired-create-directory  | Create new empty directory                  | +          |
| dired-diff              | Compare file at point with another          | =          |
| dired-subtree-toggle    | Toggle viewing subtree at point             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-create-empty-file
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; File Icons in Dired
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "Preview")
                              ("jpg" . "Preview")
                              ("png" . "Preview")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

* mu4e
[[https://macowners.club/posts/email-emacs-mu4e-macos/][Email setup in Emacs with Mu4e on macOS | macOS & (open-source) Software]]
#+begin_src emacs-lisp
;; for sending mails
(require 'smtpmail)

;; we installed this with homebrew
(setq mu4e-mu-binary (executable-find "mu"))

;; this is the directory we created before:
(setq mu4e-maildir "~/.maildir")

;; this command is called to sync imap servers:
(setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))

;; how often to call it in seconds:
(setq mu4e-update-interval 300)

;; save attachment to desktop by default
;; or another choice of yours:
(setq mu4e-attachment-dir "~/Desktop")

;; rename files when moving - needed for mbsync:
(setq mu4e-change-filenames-when-moving t)

;; list of your email adresses:
(setq mu4e-user-mail-address-list '("berrygw06@gmail.com"))
#+end_src
** context
This controls the account context one is in. Helpful for instance, when composing an email. You can then select the context, which sets at the same time the sender.
+begin_src emacs-lisp
(setq mu4e-contexts
      `(,(make-mu4e-context
          :name "gmail"
          :enter-func
          (lambda () (mu4e-message "Enter berrygw@gmail.com context"))
          :leave-func
          (lambda () (mu4e-message "Leave berrygw06@gmail.com context"))
          :match-func
          (lambda (msg)
            (when msg
              (mu4e-message-contact-field-matches msg
                                                  :to "berrygw06@gmail.com")))
          :vars '((user-mail-address . "berrygw06@gmail.com")
                  (user-full-name . "Gardner Berry")
                  (mu4e-drafts-folder . "/gmail/Drafts")
                  (mu4e-refile-folder . "/gmail/Archive")
                  (mu4e-sent-folder . "/gmail/Sent")
                  (mu4e-trash-folder . "/gmail/Trash")))))

(setq mu4e-context-policy 'pick-first) ;; start with the first (default) context;
(setq mu4e-compose-context-policy 'ask) ;; ask for context if no context matches;
+end_src
** sending
#+begin_src emacs-lisp
;; gpg encryptiom & decryption:

;; this can be left alone

(require 'epa-file)

(epa-file-enable)

(setq epa-pinentry-mode 'loopback)

(auth-source-forget-all-cached)

;; don't keep message compose buffers around after sending:
(setq message-kill-buffer-on-exit t)

;; send function:
(setq send-mail-function 'sendmail-send-it
      message-send-mail-function 'sendmail-send-it)

;; send program:
;; this is exeranal. remember we installed it before.
(setq sendmail-program (executable-find "msmtp"))

;; select the right sender email from the context.
(setq message-sendmail-envelope-from 'header)

;; chose from account before sending
;; this is a custom function that works for me.
;; well I stole it somewhere long ago.
;; I suggest using it to make matters easy
;; of course adjust the email adresses and account descriptions
(defun timu/set-msmtp-account ()
  (if (message-mail-p)
      (save-excursion
        (let*
            ((from (save-restriction
                     (message-narrow-to-headers)
                     (message-fetch-field "from")))
             (account
              (cond
               ((string-match "berrygw06@gmail.com" from) "personal"))))
          (setq message-sendmail-extra-arguments (list '"-a" account))))))

(add-hook 'message-send-mail-hook 'timu/set-msmtp-account)

;; mu4e cc & bcc
;; this is custom as well
(add-hook 'mu4e-compose-mode-hook
          (defun timu/add-cc-and-bcc ()
            "My Function to automatically add Cc & Bcc: headers.
    This is in the mu4e compose mode."
            (save-excursion (message-add-header "Cc:\n"))
            (save-excursion (message-add-header "Bcc:\n"))))

;; mu4e address completion
(add-hook 'mu4e-compose-mode-hook 'company-mode)
#+end_src
** optional
Here are some sane defaults for mu4e.
#+begin_src emacs-lisp
;; store link to message if in header view, not to header query:
(setq org-mu4e-link-query-in-headers-mode nil)

;; don't have to confirm when quitting:
(setq mu4e-confirm-quit nil)

;; number of visible headers in horizontal split view:
(setq mu4e-headers-visible-lines 20)

;; don't show threading by default:
(setq mu4e-headers-show-threads nil)

;; hide annoying "mu4e Retrieving mail..." msg in mini buffer:
(setq mu4e-hide-index-messages t)

;; customize the reply-quote-string:
(setq message-citation-line-format "%N @ %Y-%m-%d %H:%M :\n")

;; M-x find-function RET message-citation-line-format for docs:
(setq message-citation-line-function 'message-insert-formatted-citation-line)

;; by default do not show related emails:
(setq mu4e-headers-include-related nil)

;; by default do not show threads:
(setq mu4e-headers-show-threads nil)
#+end_src

* Markdown

#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))

#+end_src

* ORG-MODE
I wrapped most of this block in (after! org). Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults. I have also enabled org-journal by adding (+journal) to the org section of my Doom Emacs init.el.

** Org-Settings
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Documents/"
        org-agenda-files '("~/Documents/agenda.org" "~/Documents/To-Research.org" "~/Documents/inbox.org" "~/Documents/notes.org" "~/Documents/books.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-archive-location "~/Documents/archive.org::"
        org-ellipsis " ↴ "
        ;; org-ellipsis" ⤷ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-item-bullet-alist '((?- . ?➤) (?+ . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "NEXT(n)"           ; This is for something that I am in the process of doing (for example reading a book)
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" ))) ; Task has been cancelled
  )
#+END_SRC

** Org-fonts
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src


** Org-agenda
This is a way for me to archive my TODOs from my Schedule.org. As well as put TODO's into file for mildly interesting things that I want to look at someday.
#+begin_src emacs-lisp
(setq org-archive-default-command 'org-archive-subtree)

(map! :leader
      (:desc "Archive Org-Todos" "v" org-archive-default-command))

(after! org
  (setq org-agenda-deadline-leaders '("" "" "%2d d. ago: ")
      org-deadline-warning-days 0
      org-agenda-span 7
      org-agenda-start-day "-0d"
      org-agenda-skip-function-global '(org-agenda-skip-entry-if 'todo 'done)
      org-log-done 'time
      )
)
#+end_src

** Org-capture
I copy and pasted most of this from a very interesting blog post by [[https://karelvo.com/orgmode/][KarelVO]] on how they manage their TODO's. The Org-agenda simplification above is also taken from there.
#+begin_src emacs-lisp
(after! org-capture
  (setq org-capture-templates
        '(("t" "todo" entry (file+headline "~/Documents/agenda.org")
           "* TODO %?\n  %i\n  %a")
          ("T" "todo today" entry (file+headline "~/Documents/agenda.org")
           "* TODO %?\n  %i\nDEADLINE: %t\n  %a")
          ("i" "inbox" entry (file "~/Documents/inbox.org")
           "* %?")
          ("v" "clip to inbox" entry (file "~/Documents/inbox.org")
           "* %x%?")
          ("c" "call someone" entry (file "~/Documents/inbox.org")
           "* TODO Call %?\n %U")
          ("p" "phone call" entry (file "~/Documents/inbox.org")
           "* Call from %^{Caller name}\n %U\n %i\n")
          )))
#+end_src

** Org-export
I have setup org-export to include Twitter Bootstrap to make pretty HTML pages, Reveal.js allows to export org to a HTML presentation, Github Flavored Markdown to export to Joplin, and finaly Pandoc for exporting to other formats like .docx and .pptx and manny manny others.
=NOTE=: I also enable ox-publish for converting an Org site into an HTML site, but that is done in init.el (org +publish).

#+BEGIN_SRC emacs-lisp
(use-package! ox-twbs)
(use-package! ox-pandoc)
(use-package! ox-gfm)
(use-package! ox-re-reveal)
(use-package! ox-epub)
;; Make it so that org-export wont use numbered headings
(setq org-export-with-section-numbers nil)
#+END_SRC

*** OX-Reveal
Org-Reveal is a package that allows you to export your org documents to Reveal.js to make pretty presentations. I also have a macro to allow me no hide content from said presentations.
#+begin_src emacs-lisp
;; Reveal.js + Org mode
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
      org-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h3>emailme@gardnerberry.com</h3><h5>@Gamewarrior010@social.linux.pizza</h5>"
      org-re-reveal-title-slide "<h1>%t</h1><h2>%a</h2><h3>emailme@gardnerberry.com</h3><h5>@Gamewarrior010@social.linux.pizza</h5>"
      org-reveal-theme "moon"
      org-re-reveal-theme "moon"
      ;; org-re-reveal-theme "blood"
      org-re-reveal-transition "slide"
      org-reveal-plugins '(markdown notes math search zoom))

(defun set-ignored-headlines-tags (backend)
     "Remove all headlines with tag ignore_heading in the current buffer.
        BACKEND is the export back-end being used, as a symbol."
     (cond ((org-export-derived-backend-p backend 'md) (setq  org-export-exclude-tags '("noexport" "mdignore")))
           ((org-export-derived-backend-p backend 'reveal) (setq  org-export-exclude-tags '("noexport" "revealignore")))
           (t (setq  org-export-exclude-tags '("noexport")))
       ))
#+end_src


** Org-journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/Documents/Personal/Journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src


** Org-auto-tangle
=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

** Custom Functions
#+begin_src emacs-lisp
(defun gw/writing ()
  "Toggle between writing environment modes."
  (interactive)
  (if olivetti-mode
      (progn
        (olivetti-mode -1)
        (doom-big-font-mode -1))
    (progn
      (olivetti-mode)
      (doom-big-font-mode))))
#+end_src

** Org-Novelist
#+begin_src emacs-lisp
(load "~/.config/doom/org-novelist.el")
    (setq org-novelist-language-tag "en-US"  ; The interface language for Org Novelist to use. It defaults to 'en-GB' when not set
          org-novelist-author "Gardner Berry")  ; The default author name to use when exporting a story. Each story can also override this setting
          ;; org-novelist-author-email "gardner@gamewarrior.xyz"  ; The default author contact email to use when exporting a story. Each story can also override this setting
          ;; org-novelist-automatic-referencing-p nil)  ; Set this variable to 't' if you want Org Novelist to always keep note links up to date. This may slow down some systems when operating on complex stories. It defaults to 'nil' when not set
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Social Media
** Mastodon
mastodon.el is an Emacs client for the AcitivityPub social networks that implement the Mastodon API.
#+begin_src emacs-lisp
(setq mastodon-instance-url "https://social.linux.pizza"
      mastodon-active-user "Gamewarrior010")
#+end_src
** Lemmy
#+begin_src emacs-lisp
(setq lem-instance-url "https://discuss.online")
(setq lem-current-user "GameWarrior")
#+end_src

* Eshell
** Aliases
#+begin_src emacs-lisp
(setq eshell-aliases-file "~/.config/doom/eshell/aliases")
#+end_src
** Prompt
#+begin_src emacs-lisp
(with-eval-after-load "esh-opt"
  (autoload 'epe-theme-lambda "eshell-prompt-extras")
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-lambda))
#+end_src
* AI Stuff
** Ellama
#+begin_src emacs-lisp
;; (setq ellama-buffer-mode "org-mode")
(setopt ellama-language "English")

#+end_src
